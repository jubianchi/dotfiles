[gist]
	browse = 1

[core]
	editor       = vim
	pager        = tig
	excludesfile = ~/.gitignore

[pager]
	diff  = false
	graph = false

[color]
	ui    = true
	diff  = true
	pager = false

[color "branch"]
	current = blue
	local   = yellow
	remote  = green

[color "status"]
	added     = green
	changed   = yellow
	untracked = red

[difftool "Kaleidoscope"]
	cmd = ksdiff-wrapper git \"$LOCAL\" \"$REMOTE\"

[difftool]
	prompt = false

[diff]
	mnemonicprefix = true
	
	# Meld
	#external       = git-meld
	
	# Kaleidoscope
	#tool          = Kaleidoscope

[gc]
	auto                    = 0
	reflogExpire            = never
	reflogexpireUnreachable = 100 days

[branch]
	autosetupmerge  = true
	autosetuprebase = never

[merge]
	stat = true

[mergetool]
	keepBackup = false

[push]
	default = tracking

[help]
	autocorrect = 1

[url "git@github.com:"]
	insteadOf     = "ghs:"
	pushInsteadOf = "ghs:"

[url "git://github.com/"]
	insteadOf = "gh:"

[url "git@gist.github.com:"]
	insteadOf     = "gists:"
	pushInsteadOf = "gists:"

[url "git://gist.github.com/"]
	insteadOf = "gist:"

[url "git@bitbucket.org:"]
	insteadOf     = "bbs:"
	pushInsteadOf = "bbs:"

[url "https://bitbucket.org/"]
	insteadOf = "bb:"

[alias]
	# Repository
	cleanup = "!f() { echo \"This will prune ${1-origin}, run GC and clear stash.\nAre you sure ? (RETURN to continue | CTRL+C to cancel)\" && read && git remote prune \"${1-origin}\" && git gc && git stash clear; }; f"
	ignore  = "!f() { [ ! -e \"$GIT_PREFIX.gitignore\" ] && touch \"$GIT_PREFIX.gitignore\"; echo \"$1\" >> $GIT_PREFIX.gitignore; }; f"
	make    = "!f() { [ -z $2 ] && git init; [ ! -z $2 ] && git init --template=\"$HOME/$2\" && git commit --allow-empty -m\"${1-'Initial commit'}\"; }; f"
	cl      = "!f() { [ -z $1 ] && echo \"Usage: git cl <url> [<template>]\" && exit 1; [ -z $2 ] && git clone $1; [ ! -z $2 ] && git clone $1 --template=\"$HOME/.gittemplates/$2\"; }; f"

	# Configuration
	aliases = "!git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\t=> \\2/' | sort"

	# Staging
	addall    = !git add -u && git add . && git ls
	patch     = add --patch
	unadd     = !git reset HEAD --
	unchanged = update-index --assume-unchanged	
	changed   = update-index --no-assume-unchanged
	
	# Commit
	amend   = commit --amend -C HEAD
	cp      = cherry-pick -ex
	undo    = !git reset --soft HEAD~ && git ls

	# Branching
	br      = "!f() { git for-each-ref --sort=-committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset)|%(color:red)%(objectname:short)%(color:reset) (%(color:green)%(committerdate:relative)%(color:reset))|%(contents:subject)|%(authorname)' | column -ts'|'; }; f"
	bra     = !git br -a
	brr     = !git br -r
	brn     = !git bra --no-merged
	cb      = checkout -b
	pwd     = rev-parse --abbrev-ref HEAD

	# Workflow
	develop = checkout develop
	master  = checkout master
	go      = "!f() { [ -z $1 ] && echo \"Usage: git go <branch>\" && exit 1; git branch $1 2>/dev/null; git checkout $1; }; f"
	finish  = "!f() { BRANCH=$(git pwd); git rebase -i $1 && git checkout $1 && git merge $BRANCH; }; f"
	wip     = "!f() { BRANCH=$(git pwd); (git go wip/$1) && git addall && git commit -m'Work in progress' && git checkout $BRANCH; }; f"
	stashstash = "!f() { STASH=$(git stash); echo \"\\033[0;31mKouroukoukou roukoukou stash stash\\033[0m\"; echo \"$STASH\"; open \"http://www.youtube.com/watch?v=LpE1bJp8-4w&feature=youtu.be&t=47s\" > /dev/null 2>&1 & }; f"
	satsh = !git stashstash
	stach = !git satsh
	sa = !git satsh

	# Status
	d       = !git --no-pager diff
	dc      = !git d --cached
	st      = !tig status
	stat    = diff --stat
	ls      = status --short

	# Remote
	fetchor = fetch origin
	fetchup = fetch upstream
	pullor  = !git rp origin
	pullup  = !git rp upstream
	pushor  = push origin
	pousse  = push
	pushup  = push upstream
	rp      = pull --rebase
	radd    = remote add

	# Log
	l       = !git log | tig -FRSX
	ll      = !GIT_PAGER='less -FRSX' git log --date=short --pretty=format:'%Cred%h%Creset%x09%Cgreen%cr%Creset%x09%C(cyan)%an%Creset %s%x09%C(yellow)%d%Creset'
	graph   = !GIT_PAGER='less -FRSX' git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(cyan)<%an>%Creset' --abbrev-commit --date=relative --all

    # Github
	# https://github.com/defunkt/gist
	gist    = !gist
	ghinit  = !sh -c 'git config --add 'remote.${1-origin}.fetch' '+refs/pull/*/head:refs/remotes/${1-origin}/pr/*''
	prstart = !sh -c 'git fetch '${2-origin}' && git checkout pr/$0'

	# Utilities
	g       = gui
	k       = !gitk --all > /dev/null 2>&1 
	# http://jonas.nitro.dk/tig/
	t       = !tig	
